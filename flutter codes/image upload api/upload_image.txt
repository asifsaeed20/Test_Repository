import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:modal_progress_hud_nsn/modal_progress_hud_nsn.dart';
import 'package:http/http.dart' as http;

class UploadImageScreen extends StatefulWidget {
  const UploadImageScreen({Key? key}) : super(key: key);

  @override
  _UploadImageScreenState createState() => _UploadImageScreenState();
}

class _UploadImageScreenState extends State<UploadImageScreen> {
  File? image;
  final ImagePicker _picker = ImagePicker();
  bool showSpinner = false;

  Future<void> getImage() async {
    try {
      final XFile? pickedFile = await _picker.pickImage(
        source: ImageSource.gallery, // Google Photos ya Default Gallery open karega
        imageQuality: 80, // Compression apply karega
      );
      if (pickedFile != null) {
        setState(() {
          image = File(pickedFile.path);
        });
      } else {
        print('No image selected');
      }
    } catch (e) {
      print('Error picking image: $e');
    }
  }

  Future<void> uploadImage() async {
    if (image == null) {
      print('No image selected');
      return;
    }
    setState(() {
      showSpinner = true;
    });

    var stream = http.ByteStream(image!.openRead());
    var length = await image!.length();
    var uri = Uri.parse('https://fakestoreapi.com/products');

    var request = http.MultipartRequest('POST', uri);
    request.fields['title'] = "Static title";

    var multipartFile = http.MultipartFile(
      'image',
      stream,
      length,
      filename: image!.path.split('/').last,
    );

    request.files.add(multipartFile);

    var response = await request.send();
    var responseData = await response.stream.bytesToString();
    print(responseData);

    setState(() {
      showSpinner = false;
    });

    if (response.statusCode == 200) {
      print('Image uploaded successfully');

      // ✅ Snackbar Show Karega
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('✅ Image uploaded successfully!'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 2),
        ),
      );

      // ✅ Success Dialog Show Karega
      showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text('Upload Successful ✅'),
            content: const Text('Your image has been uploaded successfully!'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.pop(context); // Dialog close karega
                },
                child: const Text('OK'),
              ),
            ],
          );
        },
      );
    } else {
      print('Upload failed');

      // ❌ Error Snackbar Show Karega
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('❌ Image upload failed! Try again.'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return ModalProgressHUD(
      inAsyncCall: showSpinner,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Upload Image from Gallery'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              GestureDetector(
                onTap: getImage,
                child: Container(
                  child: image == null
                      ? const Center(child: Text('Pick Image from Gallery'))
                      : Image.file(
                    image!,
                    height: 100,
                    width: 100,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: uploadImage,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  padding: const EdgeInsets.symmetric(
                      horizontal: 30, vertical: 15),
                ),
                child:
                const Text('Upload', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
